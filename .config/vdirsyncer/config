[general]
# A folder where vdirsyncer can store some metadata about each pair.
status_path = "~/.config/vdirsyncer/status/"

# CARDDAV
[pair icloud_contacts]
# A `[pair <name>]` block defines two storages `a` and `b` that should be
# synchronized. The definition of these storages follows in `[storage <name>]`
# blocks. This is similar to accounts in OfflineIMAP.
a = "contacts_local"
b = "contacts_remote"

# Synchronize all collections that can be found.
# You need to run `vdirsyncer discover` if new calendars/addressbooks are added
# on the server.

collections = ["from a", "from b"]

# Synchronize the "display name" property into a local file (~/.contacts/displayname).
metadata = ["displayname"]

# To resolve a conflict the following values are possible:
#   `null` - abort when collisions occur (default)
#   `"a wins"` - assume a's items to be more up-to-date
#   `"b wins"` - assume b's items to be more up-to-date
conflict_resolution = "b wins"

[storage contacts_local]
# A storage references actual data on a remote server or on the local disk.
# Similar to repositories in OfflineIMAP.
type = "filesystem"
path = "~/.contacts/"
fileext = ".vcf"

[storage contacts_remote]
type = "carddav"
url = "https://contacts.icloud.com"
username = "vincenzo.pace94@icloud.com"
# The password can also be fetched from the system password storage, netrc or a
# custom command. See http://vdirsyncer.pimutils.org/en/stable/keyring.html
password.fetch = ["command", "pass", "vdirsyncer/iCloud"]
 
# CALDAV
[pair mb_calendar]
a = "mb_local"
b = "mb_remote"
collections = ["from a", "from b"]

conflict_resolution = "b wins"
# Calendars also have a color property
metadata = ["displayname", "color"]

[storage mb_local]
type = "filesystem"
path = "~/.calendars/Mailbox.org"
fileext = ".ics"

[storage mb_remote]
type = "caldav"
url = "https://dav.mailbox.org/caldav/folder-ID"
username = "vincenzo.pace@mailbox.org"
password.fetch = ["command", "pass", "Email/vincenzo.pace@mailbox.org"]
